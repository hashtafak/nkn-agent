doctype html
html(lang="en")
  head
    title NKN Agent - Node List
    script(src="http://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js")
    
  body
    div
      table#Network(style='width:50%', border='1', align='center')
        thead
          tr
            th Network Nodes
            th Network Status
            th Network Version
            th Network Current Block
            th Network Latest Block Created
        tbody
            tr(align='center')
              td='N/A'
              td='N/A'
              td='N/A'
              td='N/A'
              td='N/A'

      br
      div(style='width:100%', align='center')
        a  . 
        a#btnAuthKey(class="button", style='background-color: #a0a9bc; cursor: pointer') Client AuthKey
        a  . 
      br
      div(style='width:100%', align='center')
        a  . 
        a(href="/server/add", style='color: #000000; background-color: #a0a9bc; text-decoration: none') Add Server
        a  . 
        a(href="/server/remove", style='color: #000000; background-color: #a0a9bc; text-decoration: none') Remove Server
        a  . 
      br

      table#MyNode(style='width:50%', border='1', align='center')
        thead
          tr
            th ALL
            th PersistFinished
            th WaitForSyncing
            th SyncFinished
            th SyncStarted
            th Error/Offline
          
        tbody
            tr(align='center')
              td=servers.length
              td=0
              td=0
              td=0
              td=0
              td=0

      table#MyNodeList(style='width:70%', border='1', align='center')
        thead
          tr
            th ID
            th IP
            th Status
            th Lastest Block
            th Relayed Message
            th Version
            th NKN.Service Status
            th BeneficiaryAddr
            th Node Wallet Address
            th Last Update
            th

        tbody
          each svdt, index in servers
            tr(align='center')
              td=index + 1
              td=svdt
              td=''
              td=''
              td=''
              td=''
              td=DB[svdt]['NKN.Service'] || ""
              td=DB[svdt].BeneficiaryAddr || ""
              td=DB[svdt].NodeWalletDAT.Address || ""
              td=DB[svdt].lastUpdate
              td=DB[svdt].by

      //- Network Info
      script.
        $(document).ready(() => {
            $.ajax({
                url: 'https://api2.nknx.org/crawledNodes',
                type: 'GET',
                dataType: 'json',
                success(crawledNodes) {
                    if (crawledNodes.length > 0) {
                        document.getElementById('Network').rows[1].cells[0].innerHTML = crawledNodes.length;
                    }
                },
            });
            
            $.ajax({
                url: 'https://api2.nknx.org/statistics/network',
                type: 'GET',
                dataType: 'json',
                success(networkStatistics) {
                    try {
                        document.getElementById('Network').rows[1].cells[1].innerHTML = networkStatistics.status
                        document.getElementById('Network').rows[1].cells[2].innerHTML = networkStatistics.version
                        document.getElementById('Network').rows[1].cells[3].innerHTML = networkStatistics.current_height
                        document.getElementById('Network').rows[1].cells[4].innerHTML = networkStatistics.latest_block
                    } catch {}
                },
            });

        });

      //- Node Checking
      script.
        /* eslint-disable  */
        $(document).ready(() => {
            const myNodeTable = document.getElementById('MyNode');

            function statistics() {
                const status = [];

                for (let x = 0, n = [...document.querySelectorAll('#MyNodeList > tbody > tr > td')]; x < n.length; x += (document.querySelectorAll('#MyNodeList > thead > tr > th').length)) {
                    status.push(n[x + 2].innerText);
                }

                const MyNode = {};
                for (let i = 0; i < status.length; i++) {
                    MyNode[status[i]] = 1 + (MyNode[status[i]] || 0);
                }

                myNodeTable.rows[1].cells[1].innerHTML = MyNode.PersistFinished || 0;
                myNodeTable.rows[1].cells[2].innerHTML = MyNode.WaitForSyncing || 0;
                myNodeTable.rows[1].cells[3].innerHTML = MyNode.SyncFinished || 0;
                myNodeTable.rows[1].cells[4].innerHTML = MyNode.SyncStarted || 0;
                myNodeTable.rows[1].cells[5].innerHTML = MyNode.Offline || 0;
            }

            const myNodeListTable = document.getElementById('MyNodeList');
            const promises = [];

            for (let r = 1, n = myNodeListTable.rows.length; r < n; r += 1) {
                const ip = myNodeListTable.rows[r].cells[1].innerHTML;
                myNodeListTable.rows[r].cells[2].innerHTML = 'Checking..';

                let rq = new Promise((resolve, reject) => {
                    $.ajax({
                        url: `http://${ip}:30003`,
                        data: JSON.stringify({
                            jsonrpc: '2.0',
                            method: 'getnodestate',
                            params: {},
                            id: 'nknag', // id is needed !!
                        }),
                        type: 'POST',
                        dataType: 'json',
                        //- timeout: 5000,
                        success(data) {
                            if (data.result !== undefined) {
                                myNodeListTable.rows[r].cells[2].innerHTML = data.result.syncState;
                                myNodeListTable.rows[r].cells[3].innerHTML = data.result.height;
                                myNodeListTable.rows[r].cells[4].innerHTML = data.result.relayMessageCount;
                                myNodeListTable.rows[r].cells[5].innerHTML = data.result.version;
                                
                                resolve();
                            } else {
                                myNodeListTable.rows[r].cells[2].innerHTML = 'Offline';
                                console.log(data);
                                
                                reject();
                            }
                        },
                        error(err) {
                            myNodeListTable.rows[r].cells[2].innerHTML = 'Offline';
                            console.log(err);
                            
                            reject();
                        },
                    });
                });

                promises.push(rq);
            }

            let xInterval;
            const xTimeout = setTimeout(() => {
                xInterval = setInterval(statistics, 5000);
            }, 3000);

            Promise.all(promises.map(p => p.catch(() => undefined)))
              .then(() => {
                clearInterval(xInterval);
                setTimeout(statistics, 3000);

                setTimeout(() => {
                  document.location.reload(true);
                }, 60000 + 5*myNodeListTable.rows.length*100);
            });
        });
        /* eslint-enable  */

      //- Show AuthKey
      script.
        $(document).ready(() => {
          $('#btnAuthKey').click(()=>{
            $.ajax({
                url: '/server/authkey',
                type: 'GET',
                success(authKey) {
                    if (authKey.length > 0) {
                        prompt("Your AuthKey for NKN-Agent Client", authKey);
                    }
                },
            });
          });
        });
      