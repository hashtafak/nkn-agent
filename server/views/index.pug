doctype html
html(lang="en")
  head
    title NKN Agent - Node List
    script(src="http://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js")
    
  body
    div
      table#Network(style='width:50%', border='1', align='center')
        thead
          tr
            th Network Nodes
            th Network Status
            th Network Version
            th Network Current Block
            th Network Latest Block Created
        tbody
            tr(align='center')
              td='N/A'
              td='N/A'
              td='N/A'
              td='N/A'
              td='N/A'
      br
      div(style='width:100%', align='center')
        a  . 
        a#btnAuthKey(class="button", style='background-color: #a0a9bc; cursor: pointer') Client AuthKey
        a  . 
      br
      div(style='width:100%', align='center')
        a  . 
        a(href="/server/add", style='color: #000000; background-color: #a0a9bc; text-decoration: none') Add Server
        a  . 
        a(href="/server/remove", style='color: #000000; background-color: #a0a9bc; text-decoration: none') Remove Server
        a  . 
      br

      table#MyNode(style='width:50%', border='1', align='center')
        thead
          tr
            th ALL
            th PERSIST_FINISHED
            th WAIT_FOR_SYNCING
            th SYNC_FINISHED
            th SYNC_STARTED
            th NO_ID
            th INTERNAL_ERROR
            th ERROR / OFFLINE
            
        tbody
            tr(align='center')
              td=servers.length
              td=0
              td=0
              td=0
              td=0
              td=0
              td=0
              td=0

      table#MyNodeList(style='width:70%', border='1', align='center')
        thead
          tr
            th ID
            th IP
            th Status
            th Lastest Block
            th Relayed Message
            th Version

        tbody
          each server, index in servers
            tr(align='center')
              td=index+1
              td=server
              td=''
              td=''
              td=''
              td=''

      //- Network Info
      script.
        $(document).ready(() => {
            $.ajax({
                url: 'https://api.nknx.org/network/stats',
                type: 'GET',
                dataType: 'json',
                success(networkStatistics) {
                    try {
                      document.getElementById('Network').rows[1].cells[0].innerText = networkStatistics.totalNodes;
                    } catch {}
                },
            });

            $.ajax({
                url: 'https://openapi.nkn.org/api/v1/blocks?per_page=1&page=1',
                type: 'GET',
                dataType: 'json',
                success(networkStatistics) {
                    try {
                      document.getElementById('Network').rows[1].cells[3].innerHTML = networkStatistics.blocks.data[0].id;
                      document.getElementById('Network').rows[1].cells[4].innerHTML = networkStatistics.blocks.data[0].id;
                    } catch {}
                },
            });

            //- $.ajax({
            //-     url: 'https://openapi.nkn.org/api/v1/statistics/counts',
            //-     type: 'GET',
            //-     dataType: 'json',
            //-     success(networkStatistics) {
            //-         try {
            //-           document.getElementById('Network').rows[1].cells[3].innerHTML = networkStatistics.blockCount;
            //-         } catch {}
            //-     },
            //- });
            
            //- $.ajax({
            //-     url: 'https://api2.nknx.org/statistics/network',
            //-     type: 'GET',
            //-     dataType: 'json',
            //-     success(networkStatistics) {
            //-         try {
            //-             document.getElementById('Network').rows[1].cells[1].innerHTML = networkStatistics.status
            //-             document.getElementById('Network').rows[1].cells[2].innerHTML = networkStatistics.version
            //-             document.getElementById('Network').rows[1].cells[3].innerHTML = networkStatistics.current_height
            //-             document.getElementById('Network').rows[1].cells[4].innerHTML = networkStatistics.latest_block
            //-         } catch {}
            //-     },
            //- });
        });

      //- Node Checking
      script.
        /* eslint-disable  */
        $(document).ready(() => {
            const myNodeTable = document.getElementById('MyNode');

            function statistics() {
                const status = [];
                
                for (let x = 0, n = [...document.querySelectorAll('#MyNodeList > tbody > tr > td')]; x < n.length; x += 6) {
                    status.push(n[x + 2].innerText);
                }

                const STATUS_CONST = ['PERSIST_FINISHED', 'WAIT_FOR_SYNCING', 'SYNC_FINISHED', 'SYNC_STARTED', 'OFFLINE', 'ERROR', 'INTERNAL_ERROR']

                const MyNode = {};
                for (let i = 0; i < status.length; i++) {
                  if (STATUS_CONST.includes(status[i])) {
                    MyNode[status[i]] = 1 + (MyNode[status[i]] || 0);
                  } else {
                    MyNode['NO_ID'] = 1 + (MyNode['NO_ID'] || 0);
                  }
                }

                myNodeTable.rows[1].cells[1].innerHTML = MyNode.PERSIST_FINISHED || 0;
                myNodeTable.rows[1].cells[2].innerHTML = MyNode.WAIT_FOR_SYNCING || 0;
                myNodeTable.rows[1].cells[3].innerHTML = MyNode.SYNC_FINISHED || 0;
                myNodeTable.rows[1].cells[4].innerHTML = MyNode.SYNC_STARTED || 0;
                myNodeTable.rows[1].cells[5].innerHTML = MyNode.NO_ID || 0;
                myNodeTable.rows[1].cells[6].innerHTML = MyNode.INTERNAL_ERROR || 0;
                myNodeTable.rows[1].cells[7].innerHTML = MyNode.OFFLINE || 0;

                //- console.log(MyNode);
            }

            const myNodeListTable = document.getElementById('MyNodeList');
            const promises = [];

            for (let r = 1, n = myNodeListTable.rows.length; r < n; r += 1) {
                const ip = myNodeListTable.rows[r].cells[1].innerHTML;
                myNodeListTable.rows[r].cells[2].innerHTML = 'Checking..';

                let rq = new Promise((resolve, reject) => {
                    $.ajax({
                        url: `http://${ip}:30003`,
                        data: JSON.stringify({
                            jsonrpc: '2.0',
                            method: 'getnodestate',
                            params: {},
                            id: 'nkn-agent', // id is needed !!
                        }),
                        type: 'POST',
                        dataType: 'json',
                        //- timeout: 5000,
                        success(data) {
                            if (data.result !== undefined) {
                                myNodeListTable.rows[r].cells[2].innerHTML = data.result.syncState;
                                myNodeListTable.rows[r].cells[3].innerHTML = data.result.height;
                                myNodeListTable.rows[r].cells[4].innerHTML = data.result.relayMessageCount;
                                myNodeListTable.rows[r].cells[5].innerHTML = data.result.version;
                                
                                resolve();
                            } else if (data.error.walletAddress !== undefined) {
                                myNodeListTable.rows[r].cells[2].innerHTML = data.error.walletAddress;
                                
                                resolve();
                            } else if (data.error.code === -45024) {
                                myNodeListTable.rows[r].cells[2].innerHTML = 'INTERNAL_ERROR';
                                //- console.log(`${ip} - ${data}`);
                                
                                resolve();
                            } else {
                                myNodeListTable.rows[r].cells[2].innerHTML = 'ERROR';
                                console.log(`${ip} - ${data}`);
                                
                                reject();
                            }
                        },
                        error(err) {
                            myNodeListTable.rows[r].cells[2].innerHTML = 'OFFLINE';
                            console.log(err);
                            
                            reject();
                        },
                    });
                });

                promises.push(rq);
            }

            let xInterval;
            const xTimeout = setTimeout(() => {
                xInterval = setInterval(statistics, 5000);
            }, 3000);

            Promise.all(promises.map(p => p.catch(() => undefined)))
              .then(() => {
                clearInterval(xInterval);
                setTimeout(statistics, 3000);

                setTimeout(() => {
                  document.location.reload(true);
                }, 60000 + 5*myNodeListTable.rows.length*100);
            });
        });
        /* eslint-enable  */

      //- Show AuthKey
      script.
        $(document).ready(() => {
          $('#btnAuthKey').click(()=>{
            $.ajax({
                url: '/server/authkey',
                type: 'GET',
                success(authKey) {
                    if (authKey.length > 0) {
                        prompt("Your AuthKey for NKN-Agent Client", authKey);
                    }
                },
            });
          });
        });
      